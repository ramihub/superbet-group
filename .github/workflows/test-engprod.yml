name: Echo endpoint check

on:
  workflow_dispatch: {}
  # schedule:
  #   - cron: "0 * * * *"   # optional: hourly

jobs:
  curl_check:
    runs-on: ubuntu-latest

    steps:
      - name: Sanity check with google.com (verbose, streamed)
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p logs
          URL="https://www.google.com"

          echo "=== START GOOGLE CHECK: $(date -u +"%Y-%m-%dT%H:%M:%SZ") ==="
          echo "Running: curl -v $URL"

          curl -v \
            --connect-timeout 10 \
            --max-time 30 \
            --retry 2 \
            --retry-delay 1 \
            --retry-all-errors \
            "$URL" \
            1> >(tee logs/google.stdout) \
            2> >(tee logs/google.stderr >&2)

          G_EXIT=$?
          echo "$G_EXIT" > logs/google.exitcode
          echo "GOOGLE curl exit code: $G_EXIT"
          echo "=== END GOOGLE CHECK: $(date -u +"%Y-%m-%dT%H:%M:%SZ") ==="

          test "$G_EXIT" -eq 0

      - name: Check runner public IP (ifconfig.io)
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p logs

          echo "=== START IFCONFIG CHECK: $(date -u +"%Y-%m-%dT%H:%M:%SZ") ==="
          echo "Running: curl -s ifconfig.io"

          # Save and echo to console
          curl -s ifconfig.io | tee logs/ifconfig.stdout

          echo "=== END IFCONFIG CHECK: $(date -u +"%Y-%m-%dT%H:%M:%SZ") ==="

      - name: Echo endpoint (verbose, streamed)
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p logs
          URL="https://echo.engprod.prod.happening.dev/"

          echo "=== START ECHO CHECK: $(date -u +"%Y-%m-%dT%H:%M:%SZ") ==="
          echo "Running: curl -v $URL"

          curl -v \
            --connect-timeout 10 \
            --max-time 30 \
            --retry 3 \
            --retry-delay 2 \
            --retry-all-errors \
            "$URL" \
            1> >(tee logs/echo.stdout) \
            2> >(tee logs/echo.stderr >&2)

          E_EXIT=$?
          echo "$E_EXIT" > logs/echo.exitcode
          echo "ECHO curl exit code: $E_EXIT"
          echo "=== END ECHO CHECK: $(date -u +"%Y-%m-%dT%H:%M:%SZ") ==="

          {
            echo "### GOOGLE CHECK ###"
            echo "-- STDOUT --"
            cat logs/google.stdout || true
            echo
            echo "-- STDERR --"
            cat logs/google.stderr || true
            echo
            echo "Exit: $(cat logs/google.exitcode 2>/dev/null || echo N/A)"
            echo
            echo "### IFCONFIG CHECK ###"
            cat logs/ifconfig.stdout || true
            echo
            echo "### ECHO CHECK ###"
            echo "-- STDOUT --"
            cat logs/echo.stdout || true
            echo
            echo "-- STDERR --"
            cat logs/echo.stderr || true
            echo
            echo "Exit: $(cat logs/echo.exitcode 2>/dev/null || echo N/A)"
          } > logs/full.log

          {
            echo "## Echo endpoint check"
            echo "- Google exit: \`$(cat logs/google.exitcode)\`"
            echo "- Echo exit: \`$E_EXIT\`"
            echo "- Public IP (ifconfig.io): \`$(cat logs/ifconfig.stdout)\`"
            echo
            echo "**Last 80 lines of full log:**"
            echo
            echo '```text'
            tail -n 80 logs/full.log || true
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"

          exit "$E_EXIT"

      - name: Upload logs as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: curl-logs
          path: logs/
          if-no-files-found: warn
